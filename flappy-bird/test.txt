Stack_Size       EQU     0x400;
	
				 AREA    STACK, NOINIT, READWRITE, ALIGN=3
Stack_Mem        SPACE   Stack_Size
__initial_sp

				 AREA    RESET, DATA, READONLY
                 EXPORT  __Vectors
                 EXPORT  __Vectors_End

__Vectors        DCD     __initial_sp               ; Top of Stack
                 DCD     Reset_Handler              ; Reset Handler
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	0
				 DCD	Button_Handler					 
__Vectors_End    

				 AREA    |.text|, CODE, READONLY
Reset_Handler    PROC
                 EXPORT  Reset_Handler
				 ldr	 r0, =0xE000E100
				 movs	 r4,#1	
				 str	 r4,[r0]						 
			     CPSIE	 i					 
                 LDR     R0, =__main
                 BX      R0
                 ENDP

				 AREA	 button, CODE, READONLY
Button_Handler	 PROC
				 EXPORT	 Button_Handler
				
				 ldr	 r0, =0x40010010
				 ldr	 r1,[r0]
				 movs    r3, r1
				 movs	 r2,#0xFF
				 ands	 r1,r1,r2
				 cmp	 r1,#0
				 beq	 release
				 cmp     r1, #4
				 beq     a_button
				 cmp 	 r1, #8
				 beq 	 b_button
				 cmp 	 r1, #16
				 beq 	 up_button
				 cmp 	 r1, #32
				 beq 	 down_button
				 cmp 	 r1, #64
				 beq 	 left_button
				 cmp 	 r1, #128
				 beq 	 right_button
				 str	 r3,[r0]
				 bx		 lr
				 
a_button		 str 	 r3,[r0]
				 ;LDR 	 r5, =0xFFFF00FF
				 bx  	 lr
				 
b_button 	 	 str  	 r3,[R0]
				 ;LDR  	 r5, =0xFF00FF00
				 bx    	 lr
right_button	 str  	 r3,[R0]
				 ADDS 	 R4, R4, #5
				 ADDS 	 R6, R6, #5
				 bx      lr
left_button	 	 str  	 r3,[R0]
				 SUBS 	 R4, R4, #5
				 SUBS 	 R6, R6, #5
				 bx      lr
up_button	     STR 	 R3, [R0]
				 SUBS 	 R7, R7, #15
				 SUBS 	 R5, R5, #15
				 bx 	 lr 
	
down_button 	 str 	 r3 ,[R0]
				 ADDS 	 R7, R7, #5
				 ADDS 	 R5, R5, #5
				 bx 	 lr 

release			 str	 r3,[r0]
			     bx      lr
		 
				 
				 
                 AREA    main, CODE, READONLY
                 EXPORT	 __main			 ;make __main visible to linker
                 IMPORT  image
				 IMPORT	 bird
				 ENTRY
__main           PROC
                 LDR     R0, =0x40010000
                 MOVS    R7, #120             ;alt
				 MOVS	 r5, #130			 ;ust
                 MOVS    r4, #10             ;sol
				 MOVS	 r6, #20			 ;sag
				 
				 push	 {r4}
draw_map		 
				 	
				 movs	 r4,  #160
				 
draw_from_160_col
				 LDR	 r2, =image
				 ;LDR     r2, =0xFFFFFFFF     ;PAINT1 yorum at
				
				 ;MOVS    r1, #0  			 ;background için col index bruh
				 MOVS    r3, #0				 ;background için row index bruh	 
draw_rows		 CMP	 r3, #240		 	 ;tüm rowlari çizme olayi bruh
				 BHS 	 row_end		 	 ;rowlari bitirme olayi bruh
				 push	 {r4}				 
				 subs	 r4, r4, #160
				 
				 MOVS 	 r1, r4			 	 ;her seferinde col index 0 bruh
				 pop	 {r4}
draw_cols		 CMP	 r1, r4	 	 	 	 ;col 320 olmus mu bak bruh
				 BHS     col_end		 	 ;collar bittiyse alt rowa git bruh
				 STR 	 r3, [R0]
				 STR  	 r1, [R0, #0x4]
				 push	 {r1,r3}
				 
				 ldr	 r1, [r2]
				 rev	 r1, r1
				 movs	 r3, #8
				 rors	 r1, r1, r3
				 
				 STR 	 r1, [R0, #0x8]      ;PAINT2 yorum at
				 adds	 r2, r2, #4
				 pop	 {r1}
				 pop	 {r3}
				 ADDS    r1, r1, #1
				 B 		 draw_cols
col_end			 ADDS 	 r3, r3, #1
				 B 	     draw_rows
row_end			 STR  	 R7, [R0]
				 movs	 r0, r4
				 pop 	 {r4}
				 push    {r1-r3}
				 bl		 draw_char
				 push	 {r4}
				 movs	 r4, r0
				 	 
				 ;STR	 r4, [R0,#0x4]
				 ;LDR	 r1, =0xFFFF0000
				 ;STR  	 r1, [R0, #0x8]
				 MOVS	 r1, #1	
				 ldr	 r0,=0x40010000
				 STR     r1, [R0, #0xC]
				 cmp	 r4, #160
				 beq	 change_col_start
				 b 	 	 draw_map

change_col_start 
				 adds	 r4, r4, #160
				 b 		 draw_from_160_col

draw_char		 
				 movs	 r2, r0
				 ldr	 r0, =bird
				 movs	 r1, r4
				 movs	 r3, r7
char_row		 cmp	 r3, r5
				 bhs	 char_row_end
				 movs	 r1, r4
char_col		 cmp	 r1, r6
				 bhs	 char_col_end
				 push	 {r0}
				 LDR     R0, =0x40010000
				 str	 r3, [r0]
				 str	 r1, [r0, #0x4]
				 pop	 {r0}
				 push	 {r1}
				 movs	 r1, r2
				 ;ldr	 r2, =bird
				 push	 {r1,r3}
				 
				 ldr	 r1, [r0]
				 rev	 r1, r1
				 movs	 r3, #8
				 rors	 r1, r1, r3
				 push	 {r0}
				 LDR     R0, =0x40010000
				 STR 	 r1, [R0, #0x8]      ;PAINT2 yorum at
				 pop	 {r0}
				 adds	 r0, r0, #4
				 pop	 {r1}
				 pop	 {r3}

				 movs	 r2, r1
				 pop	 {r1}
				 
				 adds	 r1, r1, #1
				 b		 char_col
char_col_end	 adds	 r3, r3, #1
				 b		 char_row
char_row_end	 
				 movs	 r0, r2
				 
				 pop     {r1}
				 	 
				 pop	 {r2}
				 pop	 {r3}
				 
				 
				 
				 ADDS	 r7, r7, #2
				 ADDS	 r5, r5, #2
				 ADDS	 r4, r4, #1
				 ADDS	 r6, r6, #1
				 bx		 lr
                 ENDP
                 END